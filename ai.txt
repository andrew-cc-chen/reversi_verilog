//Hard AI
//using minimax algorithm

module Hard_AI (
		clock, resetn, start,
		compTurn, boardState, getBoardX, getBoardY, finalX, finalY, done);
	
	input clock, resetn, start, compTurn;
	input [1:0] boardState;
	
	output reg [2:0] getBoardX, getBoardY;
	output reg done;
	output [2:0] finalX, finalY;
	reg resGBX, resGBY, enGBX, enGBY;
	
	reg [5:0] current, next;
	
	reg [5:0] i, j, k;
	
	localparam MAX_RD = 4'b0110;
	
	reg turn [MAX_RD:0];
	reg ldTurn [MAX_RD:0], changeTurn [MAX_RD:0];
	
	//simBoard coords
	reg [3:0] bdX [MAX_RD:0];
	reg [3:0] bdY [MAX_RD:0];
	reg resBdX [MAX_RD:0], resBdY [MAX_RD:0], enBdX [MAX_RD:0], enBdY [MAX_RD:0];
	
	//Game simBoards
	reg [1:0] simBoard [MAX_RD:0][7:0][7:0];
	reg resBd, ldBd [MAX_RD:0], flipBd [MAX_RD:0];
	
	reg [9:0] best [MAX_RD:0];
	reg initBest [MAX_RD:0], cmpBest [MAX_RD:0];
	
	reg [2:0] bestX, bestY, placedX, placedY;
	reg setPlacedXY;
	
	reg [9:0] score;
	reg calcScore, calcWin, setScore;
	
	reg [3:0] round;
	reg resRd, nextRd, lastRd;
	
	reg [4:0] count1, count2, count3;
	reg resC1, resC2, resC3, enC1, enC2, enC3, deC2;
	
	//Check 8 directions
	reg [3:0] ckFromX, ckFromY, ckX, ckY;
	reg ldCkFromXY;
	reg [1:0] selCkFromXY;
	reg setCkXY, changeCkXY, revCkXY;
	reg [5:0] ck8d_doneReturn, ck8d_valReturn;
	reg [1:0] selCk8dRet;
	reg ldCk8dRet;
	reg [3:0] ckRd;
	reg ldCkRd, selCkRd;
	
	reg [3:0] aX, aY;
	reg resAX, resAY, enAX, enAY;
	
	assign finalX = bestX;
	assign finalY = bestY;
	
	localparam
		START 		= 6'b000000,
		LD_BD 		= 6'b000001,
		
		FIND_MOVES 	= 6'b000010,
		
		CK8D_LOOP 	= 6'b000011,
		CK8D_NEXT 	= 6'b000100,
		
		CP_NEXT_BD 	= 6'b000101,
		
		//SET_FINAL 	= 6'b000110,
		DONE 			= 6'b000111,
		
		NEXT_ROUND 	= 6'b001000,
		PREV_ROUND 	= 6'b001001,
		
		REV_DIR 		= 6'b001010,
		FLIP 			= 6'b001011,
		
		NEXT_TURN 	= 6'b001100,
		CHANGE_TURN = 6'b001101,
		
		AVAIL_MOVES = 6'b001110,
		
		SCORE 		= 6'b001111,
		CHECK_WIN 	= 6'b010000,
		
		COMPARE 		= 6'b010001;
	
	//Determine next state
	always @ (*) begin
		case (current)
			START: next = start ? LD_BD : START;
			
			LD_BD: begin
				if (getBoardX >= 7 & getBoardY >= 7) next = FIND_MOVES;
				else next = LD_BD;
			end
			
			FIND_MOVES: begin
			if (bdX[round] > 7 | bdY[round] > 7) begin
					if (round == 0) next = DONE;
					else next = PREV_ROUND;
			   end
				else if (simBoard[round][bdY[round]][bdX[round]] != 2'b10)
					next = FIND_MOVES;
				else
					next = CK8D_LOOP;
			end
			
			CK8D_LOOP: begin
				if (count1 < 8) next = CK8D_NEXT;
				else next = ck8d_doneReturn;
			end
			
			CK8D_NEXT: begin
				if (ckX > 7 | ckY > 7)
					next = CK8D_LOOP;
				else if (simBoard[ckRd][ckY][ckX] == turn[ckRd]) begin
					if (count2 == 0) next = CK8D_LOOP;
					else next = ck8d_valReturn;
				end
				else if (simBoard[ckRd][ckY][ckX] == 2'b10)
					next = CK8D_LOOP;
				else
					next = CK8D_NEXT;
			end
			
			CP_NEXT_BD: next = CK8D_LOOP;
			
			REV_DIR: next = FLIP;
			FLIP: next = (count2 > 0) ? FLIP : CK8D_LOOP;
		
			NEXT_TURN: next = CHANGE_TURN;
			
			CHANGE_TURN: next = AVAIL_MOVES;
			
			AVAIL_MOVES: begin
			   if (aX > 7 | aY > 7) begin
					if (count3 == 1) next = CHANGE_TURN;
			      else next = CHECK_WIN;
			   end
				else if (simBoard[round+1][aY][aX] != 2'b10) next = AVAIL_MOVES;
				else next = CK8D_LOOP;
			end
			
			NEXT_ROUND: next = FIND_MOVES;
			
			PREV_ROUND: next = COMPARE;
			
			SCORE: next = COMPARE;
			
			CHECK_WIN: next = COMPARE;
			
			COMPARE: next = FIND_MOVES;
			
			DONE: next = start ? DONE : START;
			
			default: next = START;
		endcase
	end
	
	//Determine outputs
	always @ (*) begin
	
		done = 0;
		
		for (i = 0; i <= MAX_RD; i = i + 1) begin
			ldTurn[i] = 0;
			changeTurn[i] = 0;
			
			resBdX[i] = 0;
			resBdY[i] = 0;
			enBdX[i] = 0;
			enBdY[i] = 0;
			
			ldBd[i] = 0;
			
			flipBd[i] = 0;
			
			initBest[i] = 0;
			cmpBest[i] = 0;
		end
		
		resGBX = 0;
		resGBY = 0;
		enGBX = 0;
		enGBY = 0;
		
		resBd = 0;
		
		resRd = 0;
		nextRd = 0;
		lastRd = 0;
		
		resC1 = 0;
		resC2 = 0;
		resC3 = 0;
		enC1 = 0;
		enC2 = 0;
		enC3 = 0;
		deC2 = 0;
		
		ldCkFromXY = 0;
		selCkFromXY = 0;
    	setCkXY = 0;
    	changeCkXY = 0;
    	revCkXY = 0;
		
      selCk8dRet = 0;
      ldCk8dRet = 0;
		
		ldCkRd = 0;
		selCkRd = 0;
		
		resAX = 0;
		resAY = 0;
		enAX  = 0;
		enAY = 0;
		
		setPlacedXY = 0;
		
		calcScore = 0;
		calcWin = 0;
		setScore = 0;
		
		case (current)
			START: begin
				resGBX = 1;
				resGBY = 1;
				
				resBdX[0] = 1;
				resBdY[0] = 1;
				
				resBd = 1;
				
				resRd = 1;
				
				ldTurn[0] = 1;
			end
			
			LD_BD: begin
				if (getBoardX < 7 & getBoardY <= 7)
					enGBX = 1;
					
				else if (getBoardY < 7) begin
					resGBX = 1;
					enGBY = 1;
				end
				
				ldBd[0] = 1;
				initBest[0] = 1;
			end
			
			FIND_MOVES: begin
				if (bdX[round] < 7 & bdY[round] <= 7) begin
                    enBdX[round] = 1;
				end
				else if (bdY[round] < 7) begin
                    resBdX[round] = 1;
                    enBdY[round] = 1;
				end
				else begin
					enBdX[round] = 1;
					enBdY[round] = 1;
				end
			   
				if (round == 0) setPlacedXY = 1;
				
			   resC1 = 1;
				
			   ldCkFromXY = 1;
				selCkFromXY = 2'b00;
				
				ldCk8dRet = 1;
    			selCk8dRet = 2'b00;
				
				ldCkRd = 1;
				selCkRd = 0;
			end
			
			CK8D_LOOP: begin
			    enC1 = 1;
			    resC2 = 1;
			    
			    setCkXY = 1;
			end
			
			CK8D_NEXT: begin
			    enC2 = 1;
			
			    changeCkXY = 1;
			end
			
			CP_NEXT_BD: begin
				ldBd[round+1] = 1;
				resBdX[round+1] = 1;
				resBdY[round+1] = 1;
				
				resC1 = 1;
				
			   ldCkFromXY = 1;
				selCkFromXY = 2'b01;
				
				ldCk8dRet = 1;
    			selCk8dRet = 2'b01;
				
				ldCkRd = 1;
				selCkRd = 1;
			end
			
			REV_DIR: begin
				deC2 = 1;
				revCkXY = 1;
			end
			
			FLIP: begin
				deC2 = 1;
				revCkXY = 1;
				
				flipBd[round+1] = 1;
			end
		
			NEXT_TURN: begin
				ldTurn[round+1] = 1;
				
				resC3 = 1;
			end
			
			CHANGE_TURN: begin
				changeTurn[round+1] = 1;
    			
    			resAX = 1;
    			resAY = 1;
    			enC3 = 1;
    			
    			ldCk8dRet = 1;
    			selCk8dRet = 2'b10;
			end
			
			AVAIL_MOVES: begin
			
			    if (aX < 7 & aY <= 7) begin
                    enAX = 1;
				end
				else if (aY < 7) begin
                    resAX = 1;
                    enAY = 1;
				end
				else begin
					enAX = 1;
					enAY = 1;
				end
			   
			   resC1 = 1;
			   
				ldCkFromXY = 1;
				selCkFromXY = 2'b10;
			end
			
			NEXT_ROUND: begin
				nextRd = 1;
				resBdX[round+1] = 1;
				resBdY[round+1] = 1;
				initBest[round+1] = 1;
			end
			
			SCORE: begin
				calcScore = 1;
			end
			
			CHECK_WIN: begin
				calcWin = 1;
			end
			
			PREV_ROUND: begin
				setScore = 1;
				lastRd = 1;
			end
			
			COMPARE: begin
				cmpBest[round] = 1;
			end
			
			DONE: begin
				done = 1;
			end
			
		endcase
	end
	
	//State FFs
	always @ (posedge clock) begin
		if (resetn == 0)
			current <= START;
		else
			current <= next;
	end
	
	//Counters, X/Y coord trackers, etc
	always @ (posedge clock) begin
		if (resetn == 0) begin
			
			for (i = 0; i <= MAX_RD; i = i + 1) begin
				bdX[i] <= 0;
				bdY[i] <= 0;
			end
			
			getBoardX <= 0;
			getBoardY <= 0;
			
			round <= 0;
			
			count1 <= 0;
			count2 <= 0;
			count3 <= 0;
			
			aX <= 0;
			aY <= 0;
			
		end
		else begin
			
			for (i = 0; i <= MAX_RD; i = i + 1) begin
				if (resBdX[i] == 1)
					bdX[i] <= 0;
				else if (enBdX[i] == 1)
					bdX[i] <= bdX[i] + 1;
					
				if (resBdY[i] == 1)
					bdY[i] <= 0;
				else if (enBdY[i] == 1)
					bdY[i] <= bdY[i] + 1;
			end
			
			if (resGBX == 1)
				getBoardX <= 0;
			else if (enGBX == 1)
				getBoardX <= getBoardX + 1;
			
			if (resGBY == 1)
				getBoardY <= 0;
			else if (enGBY == 1)
				getBoardY <= getBoardY + 1;
			
			if (resRd == 1)
				round <= 0;
			else if (nextRd == 1)
				round <= round + 1;
			else if (lastRd == 1)
				round <= round - 1;
			
			if (resC1 == 1)
				count1 <= 0;
			else if (enC1 == 1)
				count1 <= count1 + 1;
			
			if (resC2 == 1)
				count2 <= 0;
			else if (enC2 == 1)
				count2 <= count2 + 1;
			else if (deC2 == 1)
				count2 <= count2 - 1;
			
			if (resC3 == 1)
				count3 <= 0;
			else if (enC3 == 1)
				count3 <= count3 + 1;
			
			if (resAX == 1)
				aX <= 0;
			else if (enAX == 1)
				aX <= aX + 1;
					 
			if (resAY == 1)
				aY <= 0;
			else if (enAY == 1)
				aY <= aY + 1;
			
		end
	end
	
	//Game simBoard data
	always @ (posedge clock) begin
		if (resetn == 0 | resBd == 1) begin
		
			for (i = 0; i <= MAX_RD; i = i + 1)
				for (j = 0; j < 8; j = j + 1)
					for (k = 0; k < 8; k = k + 1) begin
						simBoard[i][j][k] <= 0;
					end
			
		end
		else if (ldBd[0] == 1)
			simBoard[0][getBoardY][getBoardX] = boardState;
		
		else begin
			
			for (i = 1; i <= MAX_RD; i = i + 1) begin
				if (ldBd[i] == 1) begin
					for (j = 0; j < 8; j = j + 1)
						for (k = 0; k < 8; k = k + 1) begin
							
							if (j == ckFromY & k == ckFromX)
								simBoard[i][j][k] <= turn[round];
							else
								simBoard[i][j][k] <= simBoard[i-1][j][k];
							
						end
				end
				else if (flipBd[i] == 1)
					simBoard[i][ckY][ckX] <= turn[round];
			end
			
		end
	end
	
	//Turn
	always @ (posedge clock) begin
		if (resetn == 0)
			for (i = 0; i <= MAX_RD; i = i + 1)
				turn[i] <= 0;
				
		else begin
			
			if (ldTurn[0] == 1)
				turn[0] <= compTurn;
			
			for (i = 1; i <= MAX_RD; i = i + 1) begin
				if (ldTurn[i] == 1)
					turn[i] <= turn[i-1];
				else if (changeTurn[i] == 1)
					turn[i] <= ~turn[i];
			end
			
		end
	end
	
	//CK8D return states
    always @ (posedge clock) begin
		if (resetn == 0) begin
		   ck8d_doneReturn <= START;
		   ck8d_valReturn <= START;
		end
		else if (ldCk8dRet == 1) begin
			case (selCk8dRet)
				2'b00: begin //find moves
				   ck8d_doneReturn <= FIND_MOVES;
		         ck8d_valReturn <= CP_NEXT_BD;
				end
				2'b01: begin //flip
				   ck8d_doneReturn <= NEXT_TURN;
		         ck8d_valReturn <= REV_DIR;
				end
				2'b10: begin //available
				   ck8d_doneReturn <= AVAIL_MOVES;
		         ck8d_valReturn <= (round == MAX_RD - 1) ? SCORE : NEXT_ROUND;
				end
				default: begin
				   ck8d_doneReturn <= START;
		         ck8d_valReturn <= START;
		      end
			endcase
		end
	end
    
   //Validity checking coords
   always @ (posedge clock) begin
      if (resetn == 0) begin
         ckFromX <= 0;
         ckFromY <= 0;
         ckX <= 0;
         ckY <= 0;
      end
      else begin
			if (ldCkFromXY == 1) begin
				case (selCkFromXY)
					2'b00: begin //find moves
						ckFromX <= bdX[round];
						ckFromY <= bdY[round];
					end
					2'b01: begin //flip
						ckFromX <= bdX[round+1];
						ckFromY <= bdY[round+1];
					end
					2'b10: begin //available
						ckFromX <= aX;
						ckFromY <= aY;
					end
					default: begin
						ckFromX <= 0;
						ckFromY <= 0;
					end
				endcase
			end
			
			if (setCkXY == 1) begin
				case (count1)
					0: begin
						ckX <= ckFromX;
						ckY <= ckFromY - 1;
					end
					1: begin
						ckX <= ckFromX + 1;
						ckY <= ckFromY - 1;
					end
					2: begin
						ckX <= ckFromX + 1;
						ckY <= ckFromY;
					end
					3: begin
						ckX <= ckFromX + 1;
						ckY <= ckFromY + 1;
					end
					4: begin
						ckX <= ckFromX;
						ckY <= ckFromY + 1;
					end
					5: begin
						ckX <= ckFromX - 1;
						ckY <= ckFromY + 1;
				   end
				   6: begin
						ckX <= ckFromX - 1;
						ckY <= ckFromY;
				   end
				   7: begin
						ckX <= ckFromX - 1;
						ckY <= ckFromY - 1;
				   end
				   default: begin
						ckX <= ckFromX;
						ckY <= ckFromY;
				   end
				endcase
			end
			
			else if (changeCkXY == 1) begin
				case (count1)
				   1: begin
						ckY <= ckY - 1;
				   end
				   2: begin
						ckX <= ckX + 1;
						ckY <= ckY - 1;
				   end
				   3: begin
						ckX <= ckX + 1;
				   end
				   4: begin
						ckX <= ckX + 1;
						ckY <= ckY + 1;
				   end
				   5: begin
						ckY <= ckY + 1;
				   end
				   6: begin
						ckX <= ckX - 1;
						ckY <= ckY + 1;
				   end
				   7: begin
						ckX <= ckX - 1;
				   end
				   8: begin
						ckX <= ckX - 1;
						ckY <= ckY - 1;
				   end
				   default: begin
						ckX <= ckX;
						ckY <= ckX;
				   end
				endcase
			end
			
			else if (revCkXY == 1) begin
				case (count1)
				   5: begin
						ckY <= ckY - 1;
				   end
				   6: begin
						ckX <= ckX + 1;
						ckY <= ckY - 1;
				   end
				   7: begin
						ckX <= ckX + 1;
				   end
				   8: begin
						ckX <= ckX + 1;
						ckY <= ckY + 1;
				   end
				   1: begin
						ckY <= ckY + 1;
				   end
				   2: begin
						ckX <= ckX - 1;
						ckY <= ckY + 1;
				   end
				   3: begin
						ckX <= ckX - 1;
				   end
				   4: begin
						ckX <= ckX - 1;
						ckY <= ckY - 1;
				   end
				   default: begin
						ckX <= ckX;
						ckY <= ckX;
				   end
				endcase
			end
	   end
   end
	
	//Which round to check
	always @ (posedge clock) begin
		if (resetn == 0)
			ckRd <= 0;
		else if (ldCkRd == 1) begin
			case (selCkRd)
				1'b0: ckRd <= round;
				1'b1: ckRd <= round + 1;
				default: ckRd <= round;
			endcase
		end
	end
	
	//Best
	always @ (posedge clock) begin
		if (resetn == 0) begin
			for (i = 0; i <= MAX_RD; i = i + 1)
				best[i] <= 0;
			
			bestX <= 0;
			bestY <= 0;
		end
		else begin
			for (i = 0; i <= MAX_RD; i = i + 1) begin
				if (initBest[i] == 1) begin
					if (turn[i] == compTurn)
						best[i] <= 0;
					else
						best[i] <= 10'b1111111111;
				end
				else if (cmpBest[i] == 1) begin
					if (turn[i] == compTurn & score > best[i] | turn[i] == ~compTurn & score < best[i]) begin
						best[i] <= score;
						
						if (i == 0) begin
							bestX <= placedX;
							bestY <= placedY;
						end
					end
				end
			end
		end
	end
	
	always @ (posedge clock) begin
		if (resetn == 0) begin
			placedX <= 0;
			placedY <= 0;
		end
		else if (setPlacedXY == 1) begin
			placedX <= bdX[0];
			placedY <= bdY[0];
		end
	end
	
	//Score
	reg [6:0] own, opp;
	always @ (posedge clock) begin
		if (resetn == 0)
			score <= 0;
		else if (calcScore == 1) begin
			score = 512;
			
			for (i = 0; i < 7; i = i + 1)
				for (j = 0; j < 7; j = j + 1) begin
					if (simBoard[round+1][i][j] == compTurn)
						score = score + 1;
					else if (simBoard[round+1][i][j] == ~compTurn)
						score = score - 1;
				end
			
			if (simBoard[round+1][0][0] == compTurn)
				score = score + 32;
			else if (simBoard[round+1][0][0] == ~compTurn)
				score = score - 32;
			else begin
				if (simBoard[round+1][0][1] == compTurn)
					score = score - 8;
				else if (simBoard[round+1][0][1] == ~compTurn)
					score = score + 8;
				
				if (simBoard[round+1][1][1] == compTurn)
					score = score - 8;
				else if (simBoard[round+1][1][1] == ~compTurn)
					score = score + 8;
				
				if (simBoard[round+1][1][0] == compTurn)
					score = score - 8;
				else if (simBoard[round+1][1][0] == ~compTurn)
					score = score + 8;
			end
			
			if (simBoard[round+1][0][7] == compTurn)
				score = score + 32;
			else if (simBoard[round+1][0][7] == ~compTurn)
				score = score - 32;
			else begin
				if (simBoard[round+1][0][6] == compTurn)
					score = score - 8;
				else if (simBoard[round+1][0][6] == ~compTurn)
					score = score + 8;
				
				if (simBoard[round+1][1][6] == compTurn)
					score = score - 8;
				else if (simBoard[round+1][1][6] == ~compTurn)
					score = score + 8;
				
				if (simBoard[round+1][1][7] == compTurn)
					score = score - 8;
				else if (simBoard[round+1][1][7] == ~compTurn)
					score = score + 8;
			end
			
			if (simBoard[round+1][7][7] == compTurn)
				score = score + 32;
			else if (simBoard[round+1][7][7] == ~compTurn)
				score = score - 32;
			else begin
				if (simBoard[round+1][7][6] == compTurn)
					score = score - 8;
				else if (simBoard[round+1][7][6] == ~compTurn)
					score = score + 8;
				
				if (simBoard[round+1][6][6] == compTurn)
					score = score - 8;
				else if (simBoard[round+1][6][6] == ~compTurn)
					score = score + 8;
				
				if (simBoard[round+1][6][7] == compTurn)
					score = score - 8;
				else if (simBoard[round+1][6][7] == ~compTurn)
					score = score + 8;
			end
			
			if (simBoard[round+1][7][0] == compTurn)
				score = score + 32;
			else if (simBoard[round+1][7][0] == ~compTurn)
				score = score - 32;
			else begin
				if (simBoard[round+1][7][1] == compTurn)
					score = score - 8;
				else if (simBoard[round+1][7][1] == ~compTurn)
					score = score + 8;
				
				if (simBoard[round+1][6][1] == compTurn)
					score = score - 8;
				else if (simBoard[round+1][6][1] == ~compTurn)
					score = score + 8;
				
				if (simBoard[round+1][6][0] == compTurn)
					score = score - 8;
				else if (simBoard[round+1][6][0] == ~compTurn)
					score = score + 8;
			end
			
		end
		else if (calcWin == 1) begin
			
			own = 0;
			opp = 0;
			
			for (i = 0; i < 7; i = i + 1)
				for (j = 0; j < 7; j = j + 1) begin
					if (simBoard[round+1][i][j] == compTurn)
						own = own + 1;
					else if (simBoard[round+1][i][j] == ~compTurn)
						opp = opp - 1;
				end
			
			if (own > opp) score = 10'b1111111110;
			else if (own < opp) score = 10'b0000000001;
			else score = 512;
			
		end
		else if (setScore == 1)
			score <= best[round];
	end
	
endmodule
